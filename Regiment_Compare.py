# This code uses the model established for the manuscript to plot the graph at different values of a given target variable from those listed below:
''' 
USER-DEFINED SECTION 
This block contains variables that the user is meant to manipulate.
'''

Digest = False

V = 200 # Reactor Volume per CM
N_supply = 0 # Starting N supply (does not alter results. Is a hypothetical starting point for N supplies)
N_Diet = 14 # Nitrogen Demand (g per CM per day)
crew = 10
'''
System Variables: Note that Position 1 of each list signifies the original value, while Position 2 is used in 
the actual calculation
'''
eff = 0.90
eff2 = 0.90
a = 1.65
r = [0.013, 0.013, "Rate of Nitrogen Fixation (r)"]
eta_H = [0.5, 0.5, "Harvesting Index / Efficiency ($\u03B7_{H}$)"]
eta_B = [0.8, 0.8, "Nitrogen Harvestable from Bioreactor ($\u03B7_{B}$)"]
eta_F = [1.00, eff, "Fertilization Efficiency ($\u03B7_{F}$)"]
eta_AE = [0.5, eff2, "Aerobic (AN) Digester Efficiency ($\u03B7_{AE}$)"]
eta_AN = [0.75, eff2, "Anaerobic (AN) Digester Efficiency ($\u03B7_{AN}$)"]
eta_U = [1.0, 1.0, "Urine Nitrogen Recycling Efficiency ($\u03B7_{U}$)"]
W_c = [0.80, 0.80, "Fraction of Inedible Crop to Aerobic\nDigestion ($W_{C}$)"]
W_w = [0.50, 0.50, "Fraction of Feces to \nAerobic Digestion ($W_{W}$)"]
W_f = [0.20, 0.20, "Fraction of Human Waste Nitrogen to\nFeces ($W_{F}$)"]
N_D = [14, N_Diet, 'Nitrogen Demand (g per CM per day)']



''' --- MAIN CODE --- '''

import numpy as np
import random as ran
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import math as m
from colour import Color
from labellines import labelLine, labelLines

if Digest == False:
    Z = 0  
else:
    Z = 1

Volume = V

def eta_(X, eta_AE, eta_AN):
    return (eta_AE[1]*X + eta_AN[1]*(1-X))

def ComparisonSimulator(m_d, V, Z, crew, eta_B, eta_AE, eta_AN, r, eta_H, eta_F, eta_U, W_c, W_w, W_f, a, N_D):
    N_s = 60 # Starting with 0 nitrogen
    dt = 1 # single-day time step
    units = int(m_d/dt) + 1
    modelCOMNFR = np.eye(units, 2)      # initialize data for combined NFR reactor model
    modelSEPNFR = np.eye(units, 2)      # initialize data for separate NFR reactor model
    modelREC = np.eye(units, 2)         # initialize data for recycling model
    modelNF = np.eye(units, 2)          # initialize data for nitrogen-fixing reactor model
    modelNONE = np.eye(units, 2)        # initialize data for max-depletion model
    com = np.eye(units, 2)        # initialize data for max-depletion model
    sep = np.eye(units, 2)        # initialize data for max-depletion model
    for i in range(units):
        for j in range(2):
            if j == 0:
                modelCOMNFR[i][j] = i/365
                modelSEPNFR[i][j] = i/365
                modelNONE[i][j] = i/365
                modelREC[i][j] = i/365
                modelNF[i][j] = i/365
                com[i][j] = i/365
                sep[i][j] = i/365
            elif j == 1:
                if i == 0:
                    modelCOMNFR[i][j] = N_s
                    modelSEPNFR[i][j] = N_s
                    modelNONE[i][j] = N_s
                    modelREC[i][j] = N_s
                    modelNF[i][j] = N_s
                    com[i][j] = N_s
                    sep[i][j] = N_s
                elif i > 0:
                    Z = 0 # Digestion is off
                    
                    eff = 0.90
                    AEef = 0.98
                    Fef = 0.90
                    
                    eta_AE = [AEef, AEef, "Aerobic (AN) Digester Efficiency ($\u03B7_{AE}$)"]
                    eta_AN = [AEef, AEef, "Anaerobic (AN) Digester Efficiency ($\u03B7_{AN}$)"]
                    eta_F = [Fef, Fef, "Fertilization Efficiency ($\u03B7_{F}$)"]
                    
                    N_in = a * r[1] * V * eta_B[1] * (eta_(W_c[1], eta_AE, eta_AN))**Z
                    N_rec = N_D[1]*( eta_(W_c[1], eta_AE, eta_AN) * ( 1 / eta_H[1] - 1) + W_f[1] * (eta_(W_w[1], eta_AE, eta_AN)) + eta_U[1] * (1 - W_f[1]))
                    N_out = N_D[1] / (eta_F[1] * eta_H[1]) + Z * (N_D[1]) * eta_U[1] * (1 - W_f[1]) * (1- eta_(W_c[1], eta_AE, eta_AN))
                    modelCOMNFR[i][j] = modelCOMNFR[i - 1][j] + dt * (N_in + crew * (N_rec - N_out)) / 1000
                    
                    N_in_SEPNFR = r[1] * V * eta_(0.8, eta_AE, eta_AN)**Z * eta_B[1]/10
                    N_out_SEPNFR = N_D[1] / (eta_H[1] * eta_F[1] )
                    
                    modelSEPNFR[i][j] = modelSEPNFR[i-1][j] + dt * crew * (N_in_SEPNFR + (N_rec - N_out_SEPNFR))/1000
                    modelNONE[i][j] = modelNONE[i-1][j]+ dt * crew * (N_in_SEPNFR*0 + (N_rec*0 - N_out_SEPNFR))/1000
                    modelREC[i][j] = modelREC[i-1][j]+ dt * crew * (N_in_SEPNFR*0 + (N_rec - N_out_SEPNFR))/1000
                    modelNF[i][j] = modelNF[i-1][j] + dt * crew * (N_in_SEPNFR + (N_rec*0 - N_out_SEPNFR))/1000  
                    
                    
                    Z = 1 # Digestion Occurs for biomass
                    
                    AEef = 0.94737
                    Fef = 0.95
                    
                    eta_AE = [AEef, AEef, "Aerobic (AN) Digester Efficiency ($\u03B7_{AE}$)"]
                    eta_AN = [AEef, AEef, "Anaerobic (AN) Digester Efficiency ($\u03B7_{AN}$)"]
                    eta_F = [Fef, Fef, "Fertilization Efficiency ($\u03B7_{F}$)"]
                    
                    N_in = a * r[1] * V * eta_B[1] * (eta_(W_c[1], eta_AE, eta_AN))**Z
                    N_rec = N_D[1]*( eta_(W_c[1], eta_AE, eta_AN) * ( 1 / eta_H[1] - 1) + W_f[1] * (eta_(W_w[1], eta_AE, eta_AN)) + eta_U[1] * (1 - W_f[1]))
                    N_out = N_D[1] / (eta_F[1] * eta_H[1]) + Z * (N_D[1]) * eta_U[1] * (1 - W_f[1]) * (1- eta_(W_c[1], eta_AE, eta_AN))
                    N_in_SEPNFR = r[1] * V * eta_(0.8, eta_AE, eta_AN)**Z * eta_B[1]/10
                    N_out_SEPNFR = N_D[1] / (eta_H[1] * eta_F[1] )
                    
                    
                    com[i][j] = com[i - 1][j] + dt * (N_in + crew * (N_rec - N_out)) / 1000
                    sep[i][j] = sep[i-1][j] + dt * crew * (N_in_SEPNFR + (N_rec - N_out_SEPNFR))/1000

    return modelCOMNFR, modelSEPNFR, modelREC, modelNF, modelNONE, com, sep
    

def Simulator(m_d, TVariable, eta_B, eta_AE, eta_AN, r, eta_H, eta_F, eta_U, W_c, W_w, W_f, a, N_D, isEta, isW):
    
    V, Z, N_supply, mission_duration = 120, 1, 60, 1
    N_supply = 60
    crew = [10, 10]
    plt.rcParams['figure.dpi'] = 1000
    V_true = [V * crew[1], V * crew[1]]
    
    
    N_s = [N_supply, N_supply]
    dt = 1 # day
    units = int(m_d/dt) + 1
    
    scale100 = np.eye(units, 2)
    scale80 = np.eye(units, 2)
    scale60 = np.eye(units, 2)
    scale40 = np.eye(units, 2)
    scale20 = np.eye(units, 2)
    scale0 = np.eye(units, 2)
    scaleNom = np.eye(units, 2)
    
    scales = [scale0, scale20, scale40, scale60, scale80, scale100, scaleNom]
    
    yLabels = []
    
    for i in range(units):
        for j in range(2):
            if j == 0:
                for k in range(0, len(scales)):
                    scales[k][i][j] = i/365
            elif j == 1 and i == 0:
                for k in range(0, len(scales)):
                    scales[k][i][j] = N_s[1]
            elif j == 1 and i > 0:
                for scale in range(len(scales)):
                    if scale == len(scales) - 1:
                        TVariable[1] = TVariable[0]
                    else:
                        if isEta == True:
                            TVariable[1] = scale * 0.2
                            if isW == True:
                                if scale == 0:
                                    TVariable[1] = 0
                                elif scale == 1:
                                    TVariable[1] = 0.2
                                elif scale == 2:
                                    TVariable[1] = 0.4
                                elif scale == 3:
                                    TVariable[1] = 0.6
                                elif scale == 4:
                                    TVariable[1] = 0.8
                                elif scale == 5:
                                    TVariable[1] = 1
                        elif isEta == False:
                            if scale == 0:
                                TVariable[1] = TVariable[0] * 0.25
                            elif scale == 1:
                                TVariable[1] = TVariable[0] * 0.5
                            elif scale == 2:
                                TVariable[1] = TVariable[0] * 1.5
                            elif scale == 3:
                                TVariable[1] = TVariable[0] * 2.0
                            elif scale == 4:
                                TVariable[1] = TVariable[0] * 2.5
                            elif scale == 5:
                                TVariable[1] = TVariable[0] * 3.0
                        
                                
                    if eta_F[1] == 0:
                        eta_F[1] = 0.001
                    if eta_H[1] == 0:
                        eta_H[1] = 0.001
                        
                    N_in = a * r[1] * V_true[1] * eta_B[1] * (eta_(W_c[1], eta_AE, eta_AN))**Z
                    N_rec = N_D[1]*( eta_(W_c[1], eta_AE, eta_AN) * ( 1 / eta_H[1] - 1) + W_f[1] * (eta_(W_w[1], eta_AE, eta_AN)) + eta_U[1] * (1 - W_f[1]))
                    N_out = N_D[1] / (eta_F[1] * eta_H[1]) + Z * (N_D[1]) * eta_U[1] * (1 - W_f[1]) * (1-eta_(0.8, eta_AE, eta_AN)) 
                
                    scales[scale][i][j] = round(scales[scale][i-1][j] + dt * (N_in + crew[1] * (N_rec - N_out)) / 1000, 3)
    
    
    x = [scales[0][i][0] for i in range(units)]
    scale0y = [scales[0][i][j] for i in range(units)]
    scale20y = [scales[1][i][j] for i in range(units)]
    scale40y = [scales[2][i][j] for i in range(units)]
    scale60y = [scales[3][i][j] for i in range(units)]
    scale80y = [scales[4][i][j] for i in range(units)]
    scale100y = [scales[5][i][j] for i in range(units)]
    scaleNomy = [scales[6][i][j] for i in range(units)]
    
    p1, p2, p3, p4, p5, p6, p7 = 0, 0, 0, 0, 0, 0, 0
    n1, n2, n3, n4, n5, n6, n7 = None, None, None, None, None, None, None
    
    p1 = scale0y
    scaleFixed = [scale0y, scale20y, scale40y, scale60y, scale80y, scale100y]
    if isEta == True:
        scaleNames = ["0%", "20%", "40%", "60%", "80%", "100%"]
        nomName = str(int(round(TVariable[1] * 100, 0)))+'%'
    else:
        scaleNames = ["0.25x", "0.50x", "1.5x", "2.0x", "2.5x", "3.0x"]
        nomName = str(int(round(TVariable[1] * 100, 0)))+'.0x'
    
    placeholder = [p1, p2, p3, p4, p5, p6, p7]
    placeholderNames = [n1, n2, n3, n4, n5, n6, n7]
    
    n = 0
    
    
    
    while scaleNomy[units - 1] >= scaleFixed[n][units - 1]:
        n += 1
        overlap = [False, n]
        if scaleNomy[units - 1] == scaleFixed[n][units - 1]:
            overlap = [True, n]
            break
        
        
    for i in range(len(placeholder)):
        if i == n:
            placeholder[i] = scaleNomy
            placeholderNames[i] = nomName
        elif i < n:
            placeholder[i] = scaleFixed[i]
            placeholderNames[i] = scaleNames[i]
        elif i > n:
            placeholder[i] = scaleFixed[i-1]
            placeholderNames[i] = scaleNames[i - 1]
    try:
        if overlap[0] == True:
            placeholder.pop(n)
            placeholderNames.pop(n)
    except:
        placeholder.pop(n)
        placeholderNames.pop(n)
    return x, placeholder, placeholderNames, n, TVariable[2]
 
def graphPlots(yNames, x, yValues, Title, Inverted):
    fig, ax1 = plt.subplots()
    Color1 = Color('Red')
    Color2 = Color('Black')
    holder_palette = list(Color1.range_to(Color2, len(yNames)))
    palate = []
    n = 0
    for current_color in holder_palette:
        palate.append(current_color.hex_l)
    for i in range(0, len(yValues)):
        if i < 3:
            if i == 0:
                col = 'k'
            elif i == 1:
                col = 'darkred'
            else:
                col = 'red'
            ax1.plot(x, yValues[i], color=col, label = yNames[i])
        if i >= 3 :
            if i == 5 or i == 6:
                col = 'blue'
                if i == 5:
                    al = 0.5
                else:
                    al = 1.0
            else:
                col = 'salmon'
                if i == 3:
                    al = 1.0
                elif i == 4:
                    al = 0.5
            ax1.plot(x, yValues[i], color=col, label = yNames[i], alpha=al)
    ax1.set_xlabel('Time (Years)', fontsize=13)
    ax1.set_ylabel('\u0394N (kg)', color='k', fontsize=13)
    ax1.set_ylim([0, 80])
    ax1.tick_params(labelsize=13)
    ax1.set_xlim([0, 1])
    handles, labels = ax1.get_legend_handles_labels()
    ax1.legend(handles[::-1], labels[::-1], title='Legend', loc='lower right')

    plt.title(label=Title,fontweight=10,horizontalalignment='left',loc='left')

   
if __name__ == '__main__':
    durationinYears = 1                                     # duration in years
                                   # in L
                                               # = 1 if you are digesting reactor biomass, = 0 if not
   
    

    V = Volume * crew
    target = eta_H
    if target == r or target == a:
        isEta = False
    else:
        isEta = True
    if target == W_w or target == W_f:
        isW = True
    else:
        isW = False 
    duration = durationinYears*365
    
    x, yValues, yNames, n, TV = Simulator(duration, target, eta_B, eta_AE, eta_AN, r, eta_H, eta_F, eta_U, W_c, W_w, W_f, a, N_D, isEta, isW)
    #sepDigest = [60.0, 59.98274, 59.96548, 59.94822, 59.93096, 59.9137, 59.89644, 59.87918, 59.86192, 59.84466, 59.8274, 59.81014, 59.79288, 59.775619999999996, 59.758359999999996, 59.741099999999996, 59.723839999999996, 59.706579999999995, 59.689319999999995, 59.672059999999995, 59.654799999999994, 59.637539999999994, 59.620279999999994, 59.603019999999994, 59.58575999999999, 59.56849999999999, 59.55123999999999, 59.53397999999999, 59.51671999999999, 59.49945999999999, 59.48219999999999, 59.46493999999999, 59.44767999999999, 59.43041999999999, 59.41315999999999, 59.39589999999999, 59.37863999999999, 59.36137999999999, 59.34411999999999, 59.32685999999999, 59.30959999999999, 59.29233999999999, 59.27507999999999, 59.25781999999999, 59.24055999999999, 59.22329999999999, 59.20603999999999, 59.18877999999999, 59.17151999999999, 59.15425999999999, 59.136999999999986, 59.119739999999986, 59.102479999999986, 59.085219999999985, 59.067959999999985, 59.050699999999985, 59.033439999999985, 59.016179999999984, 58.998919999999984, 58.981659999999984, 58.96439999999998, 58.94713999999998, 58.92987999999998, 58.91261999999998, 58.89535999999998, 58.87809999999998, 58.86083999999998, 58.84357999999998, 58.82631999999998, 58.80905999999998, 58.79179999999998, 58.77453999999998, 58.75727999999998, 58.74001999999998, 58.72275999999998, 58.70549999999998, 58.68823999999998, 58.67097999999998, 58.65371999999998, 58.63645999999998, 58.61919999999998, 58.60193999999998, 58.58467999999998, 58.56741999999998, 58.55015999999998, 58.53289999999998, 58.515639999999976, 58.498379999999976, 58.481119999999976, 58.463859999999976, 58.446599999999975, 58.429339999999975, 58.412079999999975, 58.394819999999974, 58.377559999999974, 58.360299999999974, 58.343039999999974, 58.32577999999997, 58.30851999999997, 58.29125999999997, 58.27399999999997, 58.25673999999997, 58.23947999999997, 58.22221999999997, 58.20495999999997, 58.18769999999997, 58.17043999999997, 58.15317999999997, 58.13591999999997, 58.11865999999997, 58.10139999999997, 58.08413999999997, 58.06687999999997, 58.04961999999997, 58.03235999999997, 58.01509999999997, 57.99783999999997, 57.98057999999997, 57.96331999999997, 57.94605999999997, 57.92879999999997, 57.91153999999997, 57.894279999999966, 57.877019999999966, 57.859759999999966, 57.842499999999966, 57.825239999999965, 57.807979999999965, 57.790719999999965, 57.773459999999965, 57.756199999999964, 57.738939999999964, 57.721679999999964, 57.70441999999996, 57.68715999999996, 57.66989999999996, 57.65263999999996, 57.63537999999996, 57.61811999999996, 57.60085999999996, 57.58359999999996, 57.56633999999996, 57.54907999999996, 57.53181999999996, 57.51455999999996, 57.49729999999996, 57.48003999999996, 57.46277999999996, 57.44551999999996, 57.42825999999996, 57.41099999999996, 57.39373999999996, 57.37647999999996, 57.35921999999996, 57.34195999999996, 57.32469999999996, 57.30743999999996, 57.29017999999996, 57.27291999999996, 57.255659999999956, 57.238399999999956, 57.221139999999956, 57.203879999999955, 57.186619999999955, 57.169359999999955, 57.152099999999955, 57.134839999999954, 57.117579999999954, 57.100319999999954, 57.08305999999995, 57.06579999999995, 57.04853999999995, 57.03127999999995, 57.01401999999995, 56.99675999999995, 56.97949999999995, 56.96223999999995, 56.94497999999995, 56.92771999999995, 56.91045999999995, 56.89319999999995, 56.87593999999995, 56.85867999999995, 56.84141999999995, 56.82415999999995, 56.80689999999995, 56.78963999999995, 56.77237999999995, 56.75511999999995, 56.73785999999995, 56.72059999999995, 56.70333999999995, 56.68607999999995, 56.66881999999995, 56.65155999999995, 56.634299999999946, 56.617039999999946, 56.599779999999946, 56.582519999999946, 56.565259999999945, 56.547999999999945, 56.530739999999945, 56.513479999999944, 56.496219999999944, 56.478959999999944, 56.461699999999944, 56.44443999999994, 56.42717999999994, 56.40991999999994, 56.39265999999994, 56.37539999999994, 56.35813999999994, 56.34087999999994, 56.32361999999994, 56.30635999999994, 56.28909999999994, 56.27183999999994, 56.25457999999994, 56.23731999999994, 56.22005999999994, 56.20279999999994, 56.18553999999994, 56.16827999999994, 56.15101999999994, 56.13375999999994, 56.11649999999994, 56.09923999999994, 56.08197999999994, 56.06471999999994, 56.04745999999994, 56.03019999999994, 56.012939999999936, 55.995679999999936, 55.978419999999936, 55.961159999999936, 55.943899999999935, 55.926639999999935, 55.909379999999935, 55.892119999999935, 55.874859999999934, 55.857599999999934, 55.840339999999934, 55.82307999999993, 55.80581999999993, 55.78855999999993, 55.77129999999993, 55.75403999999993, 55.73677999999993, 55.71951999999993, 55.70225999999993, 55.68499999999993, 55.66773999999993, 55.65047999999993, 55.63321999999993, 55.61595999999993, 55.59869999999993, 55.58143999999993, 55.56417999999993, 55.54691999999993, 55.52965999999993, 55.51239999999993, 55.49513999999993, 55.47787999999993, 55.46061999999993, 55.44335999999993, 55.42609999999993, 55.40883999999993, 55.39157999999993, 55.374319999999926, 55.357059999999926, 55.339799999999926, 55.322539999999925, 55.305279999999925, 55.288019999999925, 55.270759999999925, 55.253499999999924, 55.236239999999924, 55.218979999999924, 55.20171999999992, 55.18445999999992, 55.16719999999992, 55.14993999999992, 55.13267999999992, 55.11541999999992, 55.09815999999992, 55.08089999999992, 55.06363999999992, 55.04637999999992, 55.02911999999992, 55.01185999999992, 54.99459999999992, 54.97733999999992, 54.96007999999992, 54.94281999999992, 54.92555999999992, 54.90829999999992, 54.89103999999992, 54.87377999999992, 54.85651999999992, 54.83925999999992, 54.82199999999992, 54.80473999999992, 54.78747999999992, 54.77021999999992, 54.752959999999916, 54.735699999999916, 54.718439999999916, 54.701179999999916, 54.683919999999915, 54.666659999999915, 54.649399999999915, 54.632139999999914, 54.614879999999914, 54.597619999999914, 54.580359999999914, 54.56309999999991, 54.54583999999991, 54.52857999999991, 54.51131999999991, 54.49405999999991, 54.47679999999991, 54.45953999999991, 54.44227999999991, 54.42501999999991, 54.40775999999991, 54.39049999999991, 54.37323999999991, 54.35597999999991, 54.33871999999991, 54.32145999999991, 54.30419999999991, 54.28693999999991, 54.26967999999991, 54.25241999999991, 54.23515999999991, 54.21789999999991, 54.20063999999991, 54.18337999999991, 54.16611999999991, 54.14885999999991, 54.13159999999991, 54.114339999999906, 54.097079999999906, 54.079819999999906, 54.062559999999905, 54.045299999999905, 54.028039999999905, 54.010779999999905, 53.993519999999904, 53.976259999999904, 53.958999999999904, 53.9417399999999, 53.9244799999999, 53.9072199999999, 53.8899599999999, 53.8726999999999, 53.8554399999999, 53.8381799999999, 53.8209199999999, 53.8036599999999, 53.7863999999999, 53.7691399999999, 53.7518799999999, 53.7346199999999, 53.7173599999999, 53.7000999999999]
    #combDigest = [60.0, 59.971821, 59.943642, 59.915462999999995, 59.887283999999994, 59.85910499999999, 59.83092599999999, 59.80274699999999, 59.77456799999999, 59.746388999999986, 59.718209999999985, 59.69003099999998, 59.66185199999998, 59.63367299999998, 59.60549399999998, 59.57731499999998, 59.549135999999976, 59.520956999999974, 59.49277799999997, 59.46459899999997, 59.43641999999997, 59.40824099999997, 59.38006199999997, 59.351882999999965, 59.323703999999964, 59.29552499999996, 59.26734599999996, 59.23916699999996, 59.21098799999996, 59.182808999999956, 59.154629999999955, 59.12645099999995, 59.09827199999995, 59.07009299999995, 59.04191399999995, 59.01373499999995, 58.985555999999946, 58.957376999999944, 58.92919799999994, 58.90101899999994, 58.87283999999994, 58.84466099999994, 58.81648199999994, 58.788302999999935, 58.760123999999934, 58.73194499999993, 58.70376599999993, 58.67558699999993, 58.64740799999993, 58.619228999999926, 58.591049999999925, 58.56287099999992, 58.53469199999992, 58.50651299999992, 58.47833399999992, 58.45015499999992, 58.421975999999916, 58.393796999999914, 58.36561799999991, 58.33743899999991, 58.30925999999991, 58.28108099999991, 58.25290199999991, 58.224722999999905, 58.1965439999999, 58.1683649999999, 58.1401859999999, 58.1120069999999, 58.0838279999999, 58.055648999999896, 58.027469999999894, 57.99929099999989, 57.97111199999989, 57.94293299999989, 57.91475399999989, 57.88657499999989, 57.858395999999885, 57.830216999999884, 57.80203799999988, 57.77385899999988, 57.74567999999988, 57.71750099999988, 57.689321999999876, 57.661142999999875, 57.63296399999987, 57.60478499999987, 57.57660599999987, 57.54842699999987, 57.52024799999987, 57.492068999999866, 57.463889999999864, 57.43571099999986, 57.40753199999986, 57.37935299999986, 57.35117399999986, 57.32299499999986, 57.294815999999855, 57.266636999999854, 57.23845799999985, 57.21027899999985, 57.18209999999985, 57.15392099999985, 57.125741999999846, 57.097562999999845, 57.06938399999984, 57.04120499999984, 57.01302599999984, 56.98484699999984, 56.95666799999984, 56.928488999999836, 56.900309999999834, 56.87213099999983, 56.84395199999983, 56.81577299999983, 56.78759399999983, 56.75941499999983, 56.731235999999825, 56.70305699999982, 56.67487799999982, 56.64669899999982, 56.61851999999982, 56.59034099999982, 56.562161999999816, 56.533982999999814, 56.50580399999981, 56.47762499999981, 56.44944599999981, 56.42126699999981, 56.39308799999981, 56.364908999999805, 56.336729999999804, 56.3085509999998, 56.2803719999998, 56.2521929999998, 56.2240139999998, 56.195834999999796, 56.167655999999795, 56.13947699999979, 56.11129799999979, 56.08311899999979, 56.05493999999979, 56.02676099999979, 55.998581999999786, 55.970402999999784, 55.94222399999978, 55.91404499999978, 55.88586599999978, 55.85768699999978, 55.82950799999978, 55.801328999999775, 55.773149999999774, 55.74497099999977, 55.71679199999977, 55.68861299999977, 55.66043399999977, 55.632254999999766, 55.604075999999765, 55.57589699999976, 55.54771799999976, 55.51953899999976, 55.49135999999976, 55.46318099999976, 55.435001999999756, 55.406822999999754, 55.37864399999975, 55.35046499999975, 55.32228599999975, 55.29410699999975, 55.26592799999975, 55.237748999999745, 55.209569999999744, 55.18139099999974, 55.15321199999974, 55.12503299999974, 55.09685399999974, 55.068674999999736, 55.040495999999735, 55.01231699999973, 54.98413799999973, 54.95595899999973, 54.92777999999973, 54.89960099999973, 54.871421999999725, 54.843242999999724, 54.81506399999972, 54.78688499999972, 54.75870599999972, 54.73052699999972, 54.702347999999716, 54.674168999999715, 54.64598999999971, 54.61781099999971, 54.58963199999971, 54.56145299999971, 54.53327399999971, 54.505094999999706, 54.476915999999704, 54.4487369999997, 54.4205579999997, 54.3923789999997, 54.3641999999997, 54.3360209999997, 54.307841999999695, 54.279662999999694, 54.25148399999969, 54.22330499999969, 54.19512599999969, 54.16694699999969, 54.138767999999686, 54.110588999999685, 54.08240999999968, 54.05423099999968, 54.02605199999968, 53.99787299999968, 53.96969399999968, 53.941514999999676, 53.913335999999674, 53.88515699999967, 53.85697799999967, 53.82879899999967, 53.80061999999967, 53.77244099999967, 53.744261999999665, 53.716082999999664, 53.68790399999966, 53.65972499999966, 53.63154599999966, 53.60336699999966, 53.575187999999656, 53.547008999999655, 53.51882999999965, 53.49065099999965, 53.46247199999965, 53.43429299999965, 53.40611399999965, 53.377934999999646, 53.349755999999644, 53.32157699999964, 53.29339799999964, 53.26521899999964, 53.23703999999964, 53.20886099999964, 53.180681999999635, 53.15250299999963, 53.12432399999963, 53.09614499999963, 53.06796599999963, 53.03978699999963, 53.011607999999626, 52.983428999999624, 52.95524999999962, 52.92707099999962, 52.89889199999962, 52.87071299999962, 52.84253399999962, 52.814354999999615, 52.786175999999614, 52.75799699999961, 52.72981799999961, 52.70163899999961, 52.67345999999961, 52.645280999999606, 52.617101999999605, 52.5889229999996, 52.5607439999996, 52.5325649999996, 52.5043859999996, 52.4762069999996, 52.448027999999596, 52.419848999999594, 52.39166999999959, 52.36349099999959, 52.33531199999959, 52.30713299999959, 52.27895399999959, 52.250774999999585, 52.222595999999584, 52.19441699999958, 52.16623799999958, 52.13805899999958, 52.10987999999958, 52.081700999999576, 52.053521999999575, 52.02534299999957, 51.99716399999957, 51.96898499999957, 51.94080599999957, 51.91262699999957, 51.884447999999566, 51.856268999999564, 51.82808999999956, 51.79991099999956, 51.77173199999956, 51.74355299999956, 51.71537399999956, 51.687194999999555, 51.65901599999955, 51.63083699999955, 51.60265799999955, 51.57447899999955, 51.54629999999955, 51.518120999999546, 51.489941999999544, 51.46176299999954, 51.43358399999954, 51.40540499999954, 51.37722599999954, 51.34904699999954, 51.320867999999535, 51.292688999999534, 51.26450999999953, 51.23633099999953, 51.20815199999953, 51.17997299999953, 51.151793999999526, 51.123614999999525, 51.09543599999952, 51.06725699999952, 51.03907799999952, 51.01089899999952, 50.98271999999952, 50.954540999999516, 50.926361999999514, 50.89818299999951, 50.87000399999951, 50.84182499999951, 50.81364599999951, 50.78546699999951, 50.757287999999505, 50.729108999999504, 50.7009299999995, 50.6727509999995, 50.6445719999995, 50.6163929999995, 50.588213999999496, 50.560034999999495, 50.53185599999949, 50.50367699999949, 50.47549799999949, 50.44731899999949, 50.41913999999949, 50.390960999999486, 50.362781999999484, 50.33460299999948, 50.30642399999948, 50.27824499999948, 50.25006599999948, 50.22188699999948, 50.193707999999475, 50.165528999999474, 50.13734999999947, 50.10917099999947, 50.08099199999947, 50.05281299999947, 50.024633999999466, 49.996454999999465, 49.96827599999946, 49.94009699999946, 49.91191799999946, 49.88373899999946, 49.85555999999946, 49.827380999999455, 49.799201999999454, 49.77102299999945, 49.74284399999945, 49.71466499999945]
    
    #graphPlots(yNames, x, yValues, TV, True)
    
    modelCOMNFR, modelSEPNFR, modelREC, modelNF, modelNONE, combDigest, sepDigest = ComparisonSimulator(duration, V, Z, crew, eta_B, eta_AE, eta_AN, r, eta_H, eta_F, eta_U, W_c, W_w, W_f, a, N_D)
    allModels = [modelCOMNFR, modelSEPNFR, modelREC, modelNF, modelNONE]
   
    yValues2 = [[modelCOMNFR[i][1] for i in range(len(modelCOMNFR))],
                [combDigest[i][1] for i in range(len(modelCOMNFR))],
                [modelSEPNFR[i][1] for i in range(len(modelCOMNFR))], 
                [sepDigest[i][1] for i in range(len(modelCOMNFR))],
                [modelREC[i][1] for i in range(len(modelCOMNFR))], 
                [modelNF[i][1] for i in range(len(modelCOMNFR))], 
                [modelNONE[i][1] for i in range(len(modelCOMNFR))],
                
                ]
    print("Final Supply for Combined NFR:", round(modelCOMNFR[365][1],0), "kg")
    #yValues2 = [combDigest, sepDigest]
    #print(yValues2[0])
    #print(yValues2[1])
    yValues3 = []
    ModelNames = ["Combined NFR", "Separate NFR", "Recycling (R)", "Nitrogen Fixation (NF)", "None"]
    ModelNames = ["Combined NFR", "Combined NFR + Digest", "Separate NFR", "Sep NFR + Digest", "Recycling (R)", "Nitrogen Fixation (NF)", "None"]
    NAMES = []
    for i in range(len(yValues2)):
        yValues3.append(yValues2[len(yValues2)-i-1])
        NAMES.append(ModelNames[len(ModelNames)-i-1])
            
    xValue = [modelCOMNFR[i][0] for i in range(len(modelCOMNFR))]

    
    
    graphPlots(NAMES, xValue, yValues3, "Comparison of N Management Regiments", True)
    
    